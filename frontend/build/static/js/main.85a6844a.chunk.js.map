{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","BASE_URL","useState","randomPrompt","setRandomPrompt","fetchedRandom","setFetchedRandom","fetchedSaved","setFetchedSaved","promptType","setPromptType","randomView","setRandomView","savedPrompts","setSavedPrompts","promptTypeMap","useEffect","fetchRandomPrompt","fetchSavedPrompts","axios","get","concat","then","res","data","catch","error","console","log","showRandomPromptCard","Card","className","Body","Title","Text","getRandomPromptText","showButtons","buttonClick","pType","Button","variant","onClick","handleSave","post","text","alert","showSavedPrompts","length","CardColumns","slice","reverse","map","prompt","index","showPrompt","handleDelete","id","delete","showLoader","Spinner","animation","role","Navbar","bg","Brand","href","Nav","Link","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85a6844a.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport {Spinner, Card, Button, Navbar, CardColumns, Form, Nav} from 'react-bootstrap';\n\nfunction App() {\n\n  // URL for django REST api\n  const BASE_URL = `http://localhost:8000/`;\n\n  // Declare state variables (the pair returned is a varaible and a function to update it)\n  const [randomPrompt, setRandomPrompt] = useState(\"\");\n  const [fetchedRandom, setFetchedRandom] = useState(false);\n  const [fetchedSaved, setFetchedSaved] = useState(false);\n  const [promptType, setPromptType] = useState(\"quickplot\");\n  const [randomView, setRandomView] = useState(true);\n  const [savedPrompts, setSavedPrompts] = useState([]);\n\n  // Use object to map prompt types to url parameters\n  //let promptType = \"quickplot\";\n  let promptTypeMap = {};\n  promptTypeMap[\"quickplot\"] = \"quick/\";\n  promptTypeMap[\"dialogue\"] = \"dialogue/\";\n  promptTypeMap[\"firstline\"] = \"first/\";\n  promptTypeMap[\"traits\"] = \"traits/\";\n\n  // useEffect() runs when the component is mounted or updated\n  useEffect(() => {\n    fetchRandomPrompt();\n    fetchSavedPrompts();\n  });\n\n  // Fetch a random prompt from the API\n  const fetchRandomPrompt = () => {\n    if (!fetchedRandom) {\n      axios.get('/'.concat(promptTypeMap[promptType]))\n      .then(res => {\n        setRandomPrompt(res.data);\n      })\n      .catch(error => console.log(error));\n      setFetchedRandom(true);\n    }\n  }\n\n  // Fetch the saved prompts from the backend server API\n  const fetchSavedPrompts = () => {\n    if (!fetchedSaved) {\n      axios.get('/'.concat(\"api/prompts\"))\n      .then(res => {\n        //savedPrompts = res.data;\n        setSavedPrompts(res.data);\n      })\n      .catch(error => console.log(error));\n      setFetchedSaved(true);\n    }\n  }\n\n  // Show the App component's body\n  const showBody = () => {\n    if (randomPrompt !== \"\") {\n      if (randomView) return showRandomPromptCard();\n      else return showSavedPrompts();\n    }\n    else return showLoader();\n  }\n\n  // Show the fetched prompt\n  const showRandomPromptCard = () => {\n    return (\n      <Card className=\"prompt random-prompt\">\n        <Card.Body>\n          <Card.Title className=\"prompt-title random-title\">Random {promptType}</Card.Title>\n          <Card.Text className=\"random-text\">\n            {getRandomPromptText()}\n          </Card.Text>\n          {showButtons()}\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  // Format the random prompt text\n  const getRandomPromptText = () => {\n    if (promptType === \"dialogue\" && randomPrompt !== \"\") return \"\\\"\" + randomPrompt + \"\\\"\";\n    else return randomPrompt;\n  }\n\n  // Handler function for when the user chooses to get another random prompt\n  const buttonClick = (pType) => {\n    setPromptType(pType);\n    setRandomPrompt(\"\");\n    setFetchedRandom(false);\n  }\n\n  // Function to return a div for all buttons concerning random prompts\n  const showButtons = () => {\n    if (randomPrompt !== \"\") return (\n      <div className=\"button-group\">\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"quickplot\")}} >Get a quick plot</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"dialogue\")}} >Get dialogue</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"firstline\")}} >Get a first line</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"traits\")}} >Get personality traits</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={handleSave} >Save Prompt</Button>\n      </div>\n    );\n  }\n\n  // Save a random prompt\n  const handleSave = () => {\n    axios.post(BASE_URL.concat(\"api/prompts/\"), {promptType: promptType, text: randomPrompt})\n    .then(res => {\n      alert(\"Saved prompt!\");\n      setFetchedSaved(false);\n    })\n    .catch(error => alert(error));\n  }\n\n  // Show all saved prompts (calls the showPrompt function)\n  const showSavedPrompts = () => {\n    if (savedPrompts.length > 0) {\n      return (\n        <CardColumns className=\"saved-deck\">\n          {savedPrompts.slice().reverse().map((prompt, index) => showPrompt(prompt, index))}\n        </CardColumns>\n      );\n    }\n    else {\n      return (\n        <Card className=\"prompt random-prompt\">\n          <Card.Body>\n            <Card.Title className=\"prompt-title random-title\">No Prompts!</Card.Title>\n            <Card.Text className=\"random-text\">\n              Try saving some prompts.\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      );\n    }\n  }\n\n  // Show a saved prompt\n  const showPrompt = (prompt, index) => {\n    return (\n      <Card key={index} className=\"prompt saved-prompt\">\n        <Card.Body>\n          <Card.Title className=\"prompt-title\">{prompt.promptType}</Card.Title>\n          <Card.Text>\n            {prompt.text}\n          </Card.Text>\n          <Button variant=\"primary\" onClick={() => {handleDelete(prompt.id)}}>Delete</Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  // Delete a prompt\n  const handleDelete = (id) => {\n    axios.delete(BASE_URL.concat(`api/prompts/${id}`))\n    .then(res => {\n      alert(\"Deleted prompt.\");\n      setFetchedSaved(false);\n    })\n    .catch(error => alert(error));\n  }\n\n  // Show a loader (if the prompt has not finished loading)\n  const showLoader = () => {\n    return (\n      <Spinner animation=\"border\" role=\"status\" variant=\"primary\" className=\"loader\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n\n  // Show top navbar\n  const showNavbar = () => {\n    return (\n      <Navbar variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\">Writing Prompts</Navbar.Brand>\n        <Button className=\"ml-auto\" variant=\"success\" onClick ={() => {setRandomView(!randomView)}}>\n          {(() => {return randomView ? \"Saved prompts\" : \"Random prompt\";})()}\n        </Button>\n      </Navbar>\n    );\n  }\n  \n  // Show footer\n  const showFooter = () => {\n    return (\n      <Navbar className=\"footer\" variant=\"dark\" bg=\"dark\">\n        <Nav.Link className=\"ml-auto link\" href=\"http://pitt.edu/~abg41/posts/prompts.html\"> API provided by http://pitt.edu/~abg41/posts/prompts.html</Nav.Link>\n      </Navbar>\n    );\n  }\n\n  // Render App component\n  return (\n    <div>\n      {showNavbar()}\n      {showBody()}\n      {showFooter()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
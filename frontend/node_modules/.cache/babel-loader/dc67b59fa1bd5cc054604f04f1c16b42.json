{"ast":null,"code":"import _slicedToArray from\"C:/Users/trist/Documents/Projects/prompts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./App.css';import React,{useState,useEffect}from'react';import'bootstrap/dist/css/bootstrap.min.css';import axios from\"axios\";import{Spinner,Card,Button,Navbar,CardColumns,Form,Nav}from'react-bootstrap';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function App(){// URL for django REST api\nvar BASE_URL=\"http://localhost:8000/\";// Declare state variables (the pair returned is a varaible and a function to update it)\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),randomPrompt=_useState2[0],setRandomPrompt=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),fetchedRandom=_useState4[0],setFetchedRandom=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),fetchedSaved=_useState6[0],setFetchedSaved=_useState6[1];var _useState7=useState(\"quickplot\"),_useState8=_slicedToArray(_useState7,2),promptType=_useState8[0],setPromptType=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),randomView=_useState10[0],setRandomView=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),savedPrompts=_useState12[0],setSavedPrompts=_useState12[1];// Use object to map prompt types to url parameters\n//let promptType = \"quickplot\";\nvar promptTypeMap={};promptTypeMap[\"quickplot\"]=\"quick/\";promptTypeMap[\"dialogue\"]=\"dialogue/\";promptTypeMap[\"firstline\"]=\"first/\";promptTypeMap[\"traits\"]=\"traits/\";// useEffect() runs when the component is mounted or updated\nuseEffect(function(){fetchRandomPrompt();fetchSavedPrompts();});// Fetch a random prompt from the API\nvar fetchRandomPrompt=function fetchRandomPrompt(){if(!fetchedRandom){axios.get('/'.concat(promptTypeMap[promptType])).then(function(res){setRandomPrompt(res.data);}).catch(function(error){return console.log(error);});setFetchedRandom(true);}};// Fetch the saved prompts from the backend server API\nvar fetchSavedPrompts=function fetchSavedPrompts(){if(!fetchedSaved){axios.get('/'.concat(\"api/prompts\")).then(function(res){//savedPrompts = res.data;\nsetSavedPrompts(res.data);}).catch(function(error){return console.log(error);});setFetchedSaved(true);}};// Show the App component's body\nvar showBody=function showBody(){if(randomPrompt!==\"\"){if(randomView)return showRandomPromptCard();else return showSavedPrompts();}else return showLoader();};// Show the fetched prompt\nvar showRandomPromptCard=function showRandomPromptCard(){return/*#__PURE__*/_jsx(Card,{className:\"prompt random-prompt\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Card.Title,{className:\"prompt-title random-title\",children:[\"Random \",promptType]}),/*#__PURE__*/_jsx(Card.Text,{className:\"random-text\",children:getRandomPromptText()}),showButtons()]})});};// Format the random prompt text\nvar getRandomPromptText=function getRandomPromptText(){if(promptType===\"dialogue\"&&randomPrompt!==\"\")return\"\\\"\"+randomPrompt+\"\\\"\";else return randomPrompt;};// Handler function for when the user chooses to get another random prompt\nvar buttonClick=function buttonClick(pType){setPromptType(pType);setRandomPrompt(\"\");setFetchedRandom(false);};// Function to return a div for all buttons concerning random prompts\nvar showButtons=function showButtons(){if(randomPrompt!==\"\")return/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(Button,{className:\"prompt-button\",variant:\"primary\",onClick:function onClick(){buttonClick(\"quickplot\");},children:\"Get a quick plot\"}),/*#__PURE__*/_jsx(Button,{className:\"prompt-button\",variant:\"primary\",onClick:function onClick(){buttonClick(\"dialogue\");},children:\"Get dialogue\"}),/*#__PURE__*/_jsx(Button,{className:\"prompt-button\",variant:\"primary\",onClick:function onClick(){buttonClick(\"firstline\");},children:\"Get a first line\"}),/*#__PURE__*/_jsx(Button,{className:\"prompt-button\",variant:\"primary\",onClick:function onClick(){buttonClick(\"traits\");},children:\"Get personality traits\"}),/*#__PURE__*/_jsx(Button,{className:\"prompt-button\",variant:\"primary\",onClick:handleSave,children:\"Save Prompt\"})]});};// Save a random prompt\nvar handleSave=function handleSave(){axios.post(BASE_URL.concat(\"api/prompts/\"),{promptType:promptType,text:randomPrompt}).then(function(res){alert(\"Saved prompt!\");setFetchedSaved(false);}).catch(function(error){return alert(error);});};// Show all saved prompts (calls the showPrompt function)\nvar showSavedPrompts=function showSavedPrompts(){if(savedPrompts.length>0){return/*#__PURE__*/_jsx(CardColumns,{className:\"saved-deck\",children:savedPrompts.slice().reverse().map(function(prompt,index){return showPrompt(prompt,index);})});}else{return/*#__PURE__*/_jsx(Card,{className:\"prompt random-prompt\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{className:\"prompt-title random-title\",children:\"No Prompts!\"}),/*#__PURE__*/_jsx(Card.Text,{className:\"random-text\",children:\"Try saving some prompts.\"})]})});}};// Show a saved prompt\nvar showPrompt=function showPrompt(prompt,index){return/*#__PURE__*/_jsx(Card,{className:\"prompt saved-prompt\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{className:\"prompt-title\",children:prompt.promptType}),/*#__PURE__*/_jsx(Card.Text,{children:prompt.text}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:function onClick(){handleDelete(prompt.id);},children:\"Delete\"})]})},index);};// Delete a prompt\nvar handleDelete=function handleDelete(id){axios.delete('/'.concat(\"api/prompts/\".concat(id))).then(function(res){alert(\"Deleted prompt.\");setFetchedSaved(false);}).catch(function(error){return alert(error);});};// Show a loader (if the prompt has not finished loading)\nvar showLoader=function showLoader(){return/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",variant:\"primary\",className:\"loader\",children:/*#__PURE__*/_jsx(\"span\",{className:\"sr-only\",children:\"Loading...\"})});};// Show top navbar\nvar showNavbar=function showNavbar(){return/*#__PURE__*/_jsxs(Navbar,{variant:\"dark\",bg:\"dark\",children:[/*#__PURE__*/_jsx(Navbar.Brand,{href:\"#\",children:\"Writing Prompts\"}),/*#__PURE__*/_jsx(Button,{className:\"ml-auto\",variant:\"success\",onClick:function onClick(){setRandomView(!randomView);},children:function(){return randomView?\"Saved prompts\":\"Random prompt\";}()})]});};// Show footer\nvar showFooter=function showFooter(){return/*#__PURE__*/_jsx(Navbar,{className:\"footer\",variant:\"dark\",bg:\"dark\",children:/*#__PURE__*/_jsx(Nav.Link,{className:\"ml-auto link\",href:\"http://pitt.edu/~abg41/posts/prompts.html\",children:\" API provided by http://pitt.edu/~abg41/posts/prompts.html\"})});};// Render App component\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[showNavbar(),showBody(),showFooter()]});}export default App;","map":{"version":3,"sources":["C:/Users/trist/Documents/Projects/prompts/frontend/src/App.js"],"names":["React","useState","useEffect","axios","Spinner","Card","Button","Navbar","CardColumns","Form","Nav","App","BASE_URL","randomPrompt","setRandomPrompt","fetchedRandom","setFetchedRandom","fetchedSaved","setFetchedSaved","promptType","setPromptType","randomView","setRandomView","savedPrompts","setSavedPrompts","promptTypeMap","fetchRandomPrompt","fetchSavedPrompts","get","concat","then","res","data","catch","error","console","log","showBody","showRandomPromptCard","showSavedPrompts","showLoader","getRandomPromptText","showButtons","buttonClick","pType","handleSave","post","text","alert","length","slice","reverse","map","prompt","index","showPrompt","handleDelete","id","delete","showNavbar","showFooter"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport {Spinner, Card, Button, Navbar, CardColumns, Form, Nav} from 'react-bootstrap';\n\nfunction App() {\n\n  // URL for django REST api\n  const BASE_URL = `http://localhost:8000/`;\n\n  // Declare state variables (the pair returned is a varaible and a function to update it)\n  const [randomPrompt, setRandomPrompt] = useState(\"\");\n  const [fetchedRandom, setFetchedRandom] = useState(false);\n  const [fetchedSaved, setFetchedSaved] = useState(false);\n  const [promptType, setPromptType] = useState(\"quickplot\");\n  const [randomView, setRandomView] = useState(true);\n  const [savedPrompts, setSavedPrompts] = useState([]);\n\n  // Use object to map prompt types to url parameters\n  //let promptType = \"quickplot\";\n  let promptTypeMap = {};\n  promptTypeMap[\"quickplot\"] = \"quick/\";\n  promptTypeMap[\"dialogue\"] = \"dialogue/\";\n  promptTypeMap[\"firstline\"] = \"first/\";\n  promptTypeMap[\"traits\"] = \"traits/\";\n\n  // useEffect() runs when the component is mounted or updated\n  useEffect(() => {\n    fetchRandomPrompt();\n    fetchSavedPrompts();\n  });\n\n  // Fetch a random prompt from the API\n  const fetchRandomPrompt = () => {\n    if (!fetchedRandom) {\n      axios.get('/'.concat(promptTypeMap[promptType]))\n      .then(res => {\n        setRandomPrompt(res.data);\n      })\n      .catch(error => console.log(error));\n      setFetchedRandom(true);\n    }\n  }\n\n  // Fetch the saved prompts from the backend server API\n  const fetchSavedPrompts = () => {\n    if (!fetchedSaved) {\n      axios.get('/'.concat(\"api/prompts\"))\n      .then(res => {\n        //savedPrompts = res.data;\n        setSavedPrompts(res.data);\n      })\n      .catch(error => console.log(error));\n      setFetchedSaved(true);\n    }\n  }\n\n  // Show the App component's body\n  const showBody = () => {\n    if (randomPrompt !== \"\") {\n      if (randomView) return showRandomPromptCard();\n      else return showSavedPrompts();\n    }\n    else return showLoader();\n  }\n\n  // Show the fetched prompt\n  const showRandomPromptCard = () => {\n    return (\n      <Card className=\"prompt random-prompt\">\n        <Card.Body>\n          <Card.Title className=\"prompt-title random-title\">Random {promptType}</Card.Title>\n          <Card.Text className=\"random-text\">\n            {getRandomPromptText()}\n          </Card.Text>\n          {showButtons()}\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  // Format the random prompt text\n  const getRandomPromptText = () => {\n    if (promptType === \"dialogue\" && randomPrompt !== \"\") return \"\\\"\" + randomPrompt + \"\\\"\";\n    else return randomPrompt;\n  }\n\n  // Handler function for when the user chooses to get another random prompt\n  const buttonClick = (pType) => {\n    setPromptType(pType);\n    setRandomPrompt(\"\");\n    setFetchedRandom(false);\n  }\n\n  // Function to return a div for all buttons concerning random prompts\n  const showButtons = () => {\n    if (randomPrompt !== \"\") return (\n      <div className=\"button-group\">\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"quickplot\")}} >Get a quick plot</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"dialogue\")}} >Get dialogue</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"firstline\")}} >Get a first line</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={() => {buttonClick(\"traits\")}} >Get personality traits</Button>\n      <Button className=\"prompt-button\" variant=\"primary\" onClick={handleSave} >Save Prompt</Button>\n      </div>\n    );\n  }\n\n  // Save a random prompt\n  const handleSave = () => {\n    axios.post(BASE_URL.concat(\"api/prompts/\"), {promptType: promptType, text: randomPrompt})\n    .then(res => {\n      alert(\"Saved prompt!\");\n      setFetchedSaved(false);\n    })\n    .catch(error => alert(error));\n  }\n\n  // Show all saved prompts (calls the showPrompt function)\n  const showSavedPrompts = () => {\n    if (savedPrompts.length > 0) {\n      return (\n        <CardColumns className=\"saved-deck\">\n          {savedPrompts.slice().reverse().map((prompt, index) => showPrompt(prompt, index))}\n        </CardColumns>\n      );\n    }\n    else {\n      return (\n        <Card className=\"prompt random-prompt\">\n          <Card.Body>\n            <Card.Title className=\"prompt-title random-title\">No Prompts!</Card.Title>\n            <Card.Text className=\"random-text\">\n              Try saving some prompts.\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      );\n    }\n  }\n\n  // Show a saved prompt\n  const showPrompt = (prompt, index) => {\n    return (\n      <Card key={index} className=\"prompt saved-prompt\">\n        <Card.Body>\n          <Card.Title className=\"prompt-title\">{prompt.promptType}</Card.Title>\n          <Card.Text>\n            {prompt.text}\n          </Card.Text>\n          <Button variant=\"primary\" onClick={() => {handleDelete(prompt.id)}}>Delete</Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  // Delete a prompt\n  const handleDelete = (id) => {\n    axios.delete('/'.concat(`api/prompts/${id}`))\n    .then(res => {\n      alert(\"Deleted prompt.\");\n      setFetchedSaved(false);\n    })\n    .catch(error => alert(error));\n  }\n\n  // Show a loader (if the prompt has not finished loading)\n  const showLoader = () => {\n    return (\n      <Spinner animation=\"border\" role=\"status\" variant=\"primary\" className=\"loader\">\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n    );\n  }\n\n  // Show top navbar\n  const showNavbar = () => {\n    return (\n      <Navbar variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\">Writing Prompts</Navbar.Brand>\n        <Button className=\"ml-auto\" variant=\"success\" onClick ={() => {setRandomView(!randomView)}}>\n          {(() => {return randomView ? \"Saved prompts\" : \"Random prompt\";})()}\n        </Button>\n      </Navbar>\n    );\n  }\n  \n  // Show footer\n  const showFooter = () => {\n    return (\n      <Navbar className=\"footer\" variant=\"dark\" bg=\"dark\">\n        <Nav.Link className=\"ml-auto link\" href=\"http://pitt.edu/~abg41/posts/prompts.html\"> API provided by http://pitt.edu/~abg41/posts/prompts.html</Nav.Link>\n      </Navbar>\n    );\n  }\n\n  // Render App component\n  return (\n    <div>\n      {showNavbar()}\n      {showBody()}\n      {showFooter()}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}